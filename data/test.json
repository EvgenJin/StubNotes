{"filename":"./data/test.json","collections":[{"name":"users","data":[{"id":1,"title":"hello","content":"# StubNotes\n## This is a project whith made by Nodejs, Vue, lokijs, socket. io\n### This application can store and edit your notes in markdown, has a quick search and tags\n```\nrun server in root directory\nnpm start\nrun client in ./stub_client\nnpm start\ngo to localhost:8080\nfor create build version\nnpm run build in in ./stub_client\nthis create static files in ./dist \nand u can use app in build mode on http server localhost:8001\n```\n\n\n","meta":{"revision":0,"created":1536602263888,"version":0},"$loki":1,"tags":["важно"]},{"id":5,"title":"linux","content":"\n## 10 самых прожорливых процессов\n\n```js\nps axo %mem,%cpu,comm,pid,euser | sort -nr | head -n 10\n```\n\n## занимаемое место\n`\ndf -h\n`\n\n## выкл вкл свап для очистки\nswapoff -a\nswapon -a\n\n","tags":[],"meta":{"revision":0,"created":1539974636142,"version":0},"$loki":21},{"id":6,"title":"Docker","content":"\n## Установка\n\n`\nyum install docker\nyum install docker-engine\nsystemctl start docker\nsystemctl enable docker\n`\n\n## Проверить\n\n `systemctl status docker`\n\n\n## Все образы\n\n`docker images`\n\n\n## Конфиг конфигов\n \n`\n/etc/systemd/system/docker.service.d/docker-sysconfig.conf\n/etc/sysconfig/docker\n/etc/systemd/system/docker.service.d/http-proxy.conf\n`\n\n## Закрыть все контейнеры\n\n`docker rm -f $(docker ps -aq)`\n\n\n## Зайти в контейнер\n\n`docker exec -it [имя контейнера] bash`\n\n\n## Чистка докера\n\n`docker rm -vf $(docker ps -aq)\ndocker rmi -f $(docker images -aq)\ndocker volume prune -f`\n\n\n## Установка на linux oracle\n\n` cd /etc/yum.repos.d/\n wget http://yum.oracle.com/public-yum-ol7.repo\n vi public-yum-ol7.repo\n​\n[ol7_latest]\nname=Oracle Linux $releasever Latest ($basearch)\nbaseurl=http://yum.oracle.com/repo/OracleLinux/OL7/latest/$basearch/\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle\ngpgcheck=1\nenabled=1\n​\n[ol7_UEKR4]\nname=Latest Unbreakable Enterprise Kernel Release 4 for Oracle Linux $releasever ($basearch)\nbaseurl=http://yum.oracle.com/repo/OracleLinux/OL7/UEKR4/$basearch/\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle\ngpgcheck=1\nenabled=1\n​\n[ol7_addons]\nname=Oracle Linux $releasever Add ons ($basearch)\nbaseurl=http://yum.oracle.com/repo/OracleLinux/OL7/addons/$basearch/\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle\ngpgcheck=1\nenabled=1`\n\n`yum install docker-engine\nsystemctl start docker\nsystemctl enable docker\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\nsystemctl status docker`\n\n## Настройка прокси\n\n### The Docker daemon uses the HTTP_PROXY, HTTPS_PROXY, and NO_PROXY environmental variables in its start-up environment to configure HTTP or HTTPS proxy behavior. You cannot configure these environment variables using the daemon.json file.\n\nThis example overrides the default docker.service file.\n\n### If you are behind an HTTP or HTTPS proxy server, for example in corporate settings, you need to add this configuration in the Docker systemd service file.\n\n### Create a systemd drop-in directory for the docker service:\n\n$ sudo mkdir -p /etc/systemd/system/docker.service.d\n\n### Create a file called /etc/systemd/system/docker.service.d/http-proxy.conf that adds the HTTP_PROXY environment variable:\n`\n[Service]\nEnvironment=\"HTTP_PROXY=http://proxy.example.com:80/\"\n`\n## Or, if you are behind an HTTPS proxy server, create a file called \n`/etc/systemd/system/docker.service.d/https-proxy.conf`\n### that adds the HTTPS_PROXY environment variable:\n\n[Service]\nEnvironment=\"HTTPS_PROXY=https://proxy.example.com:443/\"\n`\nIf you have internal Docker registries that you need to contact without proxying you can specify them via the NO_PROXY environment variable:\n`\n[Service]    \nEnvironment=\"HTTP_PROXY=http://proxy.example.com:80/\" \"NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com\"\n`\n## Or, if you are behind an HTTPS proxy server:\n\n[Service]    \nEnvironment=\"HTTPS_PROXY=https://proxy.example.com:443/\" \"NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com\"\n\n## Flush changes:\n\n`$ sudo systemctl daemon-reload`\n\n## Restart Docker:\n\n`$ sudo systemctl restart docker`\n\n## Verify that the configuration has been loaded:\n`\n$ systemctl show --property=Environment docker\nEnvironment=HTTP_PROXY=http://proxy.example.com:80/\n`\n## Or, if you are behind an HTTPS proxy server:\n`\n$ systemctl show --property=Environment docker\nEnvironment=HTTPS_PROXY=https://proxy.example.com:443/\n`\n\n\n`Image (образ) – собранная подсистема, необходимая для работы процесса, сохраненная в образе.\nContainer (контейнер) – процесс, инициализированный на базе образа. То есть контейнер существует только когда запущен. Это как экземпляр класса, а образ это типа класс. Ну я думаю идея понятна.\nHost (хост) – среда, в которой запускается докер. Проще говоря – ваша локальная машина.\nVolume – это дисковое пространство между хостом и контейнером. Проще – это папка на вашей локальной машине примонтированная внутрь контейнера. Меняете тут меняется там, и наоборот, миракл.\nDockerfile – файл с набором инструкций для создания образа будущего контейнера\nService (сервис) – по сути это запущенный образ (один или несколько контейнеров), дополнительно сконфигурированный такими опциями как открытие портов, маппинг папок (volume) и прочее. Обычно это делается при помощи docker-compose.yml файла.\nDocker-compose (докер-композ, чаще композер, но не путать с php composer) – тулза, облегчающая сборку и запуск системы состоящей из нескольких контейнеров, связанных между собой.\nBuild (билд, билдить) – процесс создания образа из набора инструкций в докерфайле, или нескольких докерфайлов, если билд делается с помощью композера\nВ данной статье позже (завтра) я опишу процесс сборки связки nginx+mysql+php7-fpm с примерами и описаниями dockerfile и docker-compose файлов.`","tags":["Docker"],"meta":{"revision":0,"created":1539974723949,"version":0},"$loki":22},{"id":7,"title":"rethinkdb","content":"\n## Запуск\n\n\n`\ndocker run -p 8080:8080 -p 28015:28015 -v $PWD:/data:Z --name rethink rethinkdb:2.3 rethinkdb --bind all\n-p проброс портов\n-d Запустить как демон\n-v прокинуть папку - [папка на хосте]:[папка в докере]\n-name дать имя иначе будет каждый запуск обзывать по-своему\n--rm удалить контейнер после остановки\n--bind all запуск по всем Ip , без rethinkdb:2.3 не работает\n`\n\n\n## Удалить все запущенные контейнеры\n\n\n`docker rm -f $(docker ps -aq)`","tags":["Docker"],"meta":{"revision":0,"created":1539974895481,"version":0},"$loki":23},{"id":8,"title":"mongodb","content":"\n## Запуск\n\n`docker run --name my_mongo -d -p 10.26.164.186:27017:27017 mongo:3.5`\n\n\n## Зайти в контейнер и добавить пользователя\n\n`docker exec -it my_mongo bash\nmongo\nuse trudesk\ndb.createUser(\n   {\n     user: \"admin\",\n     pwd: \"admin\",\n     roles: [ \"readWrite\", \"dbAdmin\" ]\n   }\n)\nexit`\n","tags":["Docker"],"meta":{"revision":0,"created":1539975067238,"version":0},"$loki":24},{"id":9,"title":"bitbucket","content":"`docker run -d -p 10.26.164.196:8080:8080 gitbucket/gitbucket`\n","tags":["Docker"],"meta":{"revision":0,"created":1539976152712,"version":0},"$loki":25},{"id":11,"title":"настройка прокси","content":"## npm\n`npm config set http-proxy\nnpm config set https-proxy`","tags":["proxy"],"meta":{"revision":0,"created":1540307309911,"version":0},"$loki":27},{"id":12,"title":"sql плюшки","content":"\n**дата + кол-во рабочих дней**\n\n`calc_wday(date,45,1,1)`","tags":[],"meta":{"revision":0,"created":1540388601350,"version":0},"$loki":28}],"idIndex":[1,21,22,23,24,25,27,28],"binaryIndices":{},"constraints":null,"uniqueNames":[],"transforms":{},"objType":"users","dirty":false,"cachedIndex":null,"cachedBinaryIndex":null,"cachedData":null,"adaptiveBinaryIndices":true,"transactional":false,"cloneObjects":false,"cloneMethod":"parse-stringify","asyncListeners":false,"disableMeta":false,"disableChangesApi":true,"disableDeltaChangesApi":true,"autoupdate":false,"serializableIndices":true,"ttl":null,"maxId":33,"DynamicViews":[],"events":{"insert":[],"update":[],"pre-insert":[],"pre-update":[],"close":[],"flushbuffer":[],"error":[],"delete":[null],"warning":[null]},"changes":[]}],"databaseVersion":1.5,"engineVersion":1.5,"autosave":false,"autosaveInterval":5000,"autosaveHandle":null,"throttledSaves":true,"options":{"serializationMethod":"normal","destructureDelimiter":"$<\n"},"persistenceMethod":"fs","persistenceAdapter":null,"verbose":false,"events":{"init":[null],"loaded":[],"flushChanges":[],"close":[],"changes":[],"warning":[]},"ENV":"NODEJS"}